// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Expense {
  expense_id            String          @id @default(uuid())
  user_id               String
  company_id            String 
  title                 String
  description           String?
  amount                Decimal
  currency              String          @default("USD") @db.VarChar(3)
  category_id           String
  expense_date          DateTime        @db.Timestamptz(6)
  merchant              String?
  attendees             String[]
  status                ExpenseStatus   @default(DRAFT)
  approval_status       ApprovalStatus  @default(PENDING)
  receipt_url           String?
  approval_metadata     Json?
  created_at            DateTime        @default(now())   @db.Timestamptz(6)
  updated_at            DateTime        @default(now())   @db.Timestamptz(6)

  category              ExpenseCategory  @relation(fields: [category_id], references: [category_id])
  receipts              Receipt[]
  audit_logs            ExpenseAuditLog[]

  @@map("expenses")

  @@index([user_id], name: "idx_expenses_user_id")
  @@index([company_id], name: "idx_expenses_company_id")
  @@index([expense_date], name: "idx_expenses_date")
  @@index([status], name: "idx_expenses_status")
  @@index([approval_status], name: "idx_expenses_approval_status")
  @@index([category_id], name: "idx_expenses_category")
  @@index([created_at], name: "idx_expenses_created_at")
  @@index([user_id, expense_date(sort: Desc)], name: "idx_expenses_user_date")
  @@index([company_id, status], name: "idx_expenses_company_status")

}

model Receipt {
  receipt_id          String     @id @default(uuid())
  expense_id          String
  file_path           String
  file_type           String     @db.VarChar(50)
  ocr_status          OCRStatus  @default(PENDING)
  ocr_confidence_score Decimal?  @db.Decimal(3, 2)
  extracted_data      Json?
  ocr_processed_at    DateTime?  @db.Timestamptz(6)
  created_at          DateTime   @default(now()) @db.Timestamptz(6)

  expense             Expense    @relation(fields: [expense_id], references: [expense_id], onDelete: Cascade)

  @@map("receipts")
}

model ExpenseCategory {
  category_id           String          @id @default(uuid())
  company_id            String
  name                  String          @db.VarChar(100)
  description           String?
  spend_limit           Int
  is_active             Boolean         @default(true)
  created_at            DateTime        @default(now()) @db.Timestamptz(6)
  updated_at            DateTime        @default(now()) @db.Timestamptz(6)

  expenses              Expense[]

  @@unique([name, company_id], name: "uk_category_name_company")
  @@map("expense_categories")
}


model ExpenseAuditLog {
  audit_id     String   @id @default(uuid())
  expense_id   String
  action_type  String   @db.VarChar(50)
  old_values   Json?
  new_values   Json?
  changed_by   String
  changed_at   DateTime @default(now()) @db.Timestamptz(6)
  ip_address   String?  @db.Inet
  user_agent   String?

  expense      Expense  @relation(fields: [expense_id], references: [expense_id])

  @@map("expense_audit_log")
}

enum ExpenseStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED // The expense has been submitted for approval, but a reviewer (like a manager or finance) rejects
  REIMBURSED
  CANCELED // The user who created the expense withdraws or cancels it before or during review.
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  AUTO_APPROVED
}

enum OCRStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  MANUAL_REVIEW_REQUIRED
}